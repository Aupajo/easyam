<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>easyam</name></assembly>
<members>
<member name="M:Types.TextWriter.wc(System.IO.TextWriter,System.String,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Centers text across line using spaces on both sides. Default 80-character line can be overridden
</summary>
</member>
<member name="M:Types.TextWriter.wt(System.IO.TextWriter,System.Int32,System.String)">
<summary>
 WriteLine at a certain tab level
</summary>
</member>
<member name="M:Types.TextWriter.wl(System.IO.TextWriter,System.String)">
<summary>
 Shorter version of WriteLine
</summary>
</member>
<member name="M:Types.StringBuilder.wc(System.Text.StringBuilder,System.String,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Centers text across line using spaces on both sides. Default 80-character line can be overridden
</summary>
</member>
<member name="M:Types.StringBuilder.wt(System.Text.StringBuilder,System.Int32,System.String)">
<summary>
 Write a line at a certain tab level ending with the current OS newline character
</summary>
</member>
<member name="M:Types.StringBuilder.wl(System.Text.StringBuilder,System.String)">
<summary>
 Write a line ending with the current OS newline character
</summary>
</member>
<member name="M:Types.String.PadBoth(System.String,System.Int32)">
<summary>
 Centers text using spaces given a certain line length
</summary>
</member>
<member name="M:Types.String.AddSpaces(System.String,System.Int32)">
<summary>
 adds the number of spaces to the beginning of the string
</summary>
</member>
<member name="M:Types.Random.GetValues(System.Random,System.Int32,System.Int32)">
<summary>
 Generates an infinite sequence of random numbers within the given range.
</summary>
</member>
<member name="M:Utils.commandLinePrintWhileEnter(Types.ConfigBase,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Prints out the options for the command. Standard stuff.
</summary>
</member>
<member name="M:EasyamParsingEngine.bulkFileLineProcessing(System.Tuple{System.IO.FileInfo,System.String[]}[])">
<summary>
 Takes a list of files, cleans and concatenates the contents of each one

</summary>
</member>
<member name="M:EasyamParsingEngine.initialProcessingOfIncomingFileLines(System.Int32,System.IO.FileInfo,System.Int32,System.Int32,System.String[])">
<summary>
 INITIAL INCOMING FILE PROCESSING. TAKES A LIST OF STRINGS AND MAKES A LIST OF COMMANDS

</summary>
</member>
<member name="M:EasyamParsingEngine.findInitialTextKeywordAndRemainingTextOnALine(Microsoft.FSharp.Collections.FSharpList{System.String},System.String)">
<summary>
 TOKEN PROCESSING. TAKES A LINE AND MAKES A LIST OF COMMANDS AND VALUES

</summary>
</member>
<member name="M:IntModelCreationTests.ROUNDTRIP: SANITY CHECK">
<summary>
 Take whatever is in the directory, process it, then process that again, and see if it matches
</summary>
</member>
</members>
</doc>
